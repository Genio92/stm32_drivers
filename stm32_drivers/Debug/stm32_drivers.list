
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa8  08000aa8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000aa8  08000aa8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa8  08000aa8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa8  08000aa8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000010  08000ac0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000ac0  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ef1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000053c  00000000  00000000  00020f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000738  00000000  00000000  00021466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00021ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  00021ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002200  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d48  00000000  00000000  00023fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007b92  00000000  00000000  00025d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002d8c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003d0  00000000  00000000  0002d914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a90 	.word	0x08000a90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000a90 	.word	0x08000a90

08000170 <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0



	Key_padRow_pins[0].GPIO_PinNumber = R0;
 8000176:	4b47      	ldr	r3, [pc, #284]	; (8000294 <Keypad_init+0x124>)
 8000178:	2201      	movs	r2, #1
 800017a:	809a      	strh	r2, [r3, #4]
	Key_padRow_pins[0].GPIO_MODE =GPIO_MODE_INPUT_PU;
 800017c:	4b45      	ldr	r3, [pc, #276]	; (8000294 <Keypad_init+0x124>)
 800017e:	2202      	movs	r2, #2
 8000180:	719a      	strb	r2, [r3, #6]
	Key_padRow_pins[0].GPIO_Output_Speed = GPIO_SPEED_10M;
 8000182:	4b44      	ldr	r3, [pc, #272]	; (8000294 <Keypad_init+0x124>)
 8000184:	2201      	movs	r2, #1
 8000186:	71da      	strb	r2, [r3, #7]
	Key_padRow_pins[0].PIN_GPIO=KEYPAD_R0_GPIO_PORT;
 8000188:	4b42      	ldr	r3, [pc, #264]	; (8000294 <Keypad_init+0x124>)
 800018a:	4a43      	ldr	r2, [pc, #268]	; (8000298 <Keypad_init+0x128>)
 800018c:	601a      	str	r2, [r3, #0]
	MCAL_GPIO_Init(&Key_padRow_pins[0]);
 800018e:	4841      	ldr	r0, [pc, #260]	; (8000294 <Keypad_init+0x124>)
 8000190:	f000 fb1e 	bl	80007d0 <MCAL_GPIO_Init>

	Key_padRow_pins[1].GPIO_PinNumber = R1;
 8000194:	4b3f      	ldr	r3, [pc, #252]	; (8000294 <Keypad_init+0x124>)
 8000196:	2202      	movs	r2, #2
 8000198:	819a      	strh	r2, [r3, #12]
	Key_padRow_pins[1].GPIO_MODE = GPIO_MODE_INPUT_PU;
 800019a:	4b3e      	ldr	r3, [pc, #248]	; (8000294 <Keypad_init+0x124>)
 800019c:	2202      	movs	r2, #2
 800019e:	739a      	strb	r2, [r3, #14]
	Key_padRow_pins[1].GPIO_Output_Speed = GPIO_SPEED_10M;
 80001a0:	4b3c      	ldr	r3, [pc, #240]	; (8000294 <Keypad_init+0x124>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	73da      	strb	r2, [r3, #15]
	Key_padRow_pins[1].PIN_GPIO=KEYPAD_R1_GPIO_PORT;
 80001a6:	4b3b      	ldr	r3, [pc, #236]	; (8000294 <Keypad_init+0x124>)
 80001a8:	4a3b      	ldr	r2, [pc, #236]	; (8000298 <Keypad_init+0x128>)
 80001aa:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(&Key_padRow_pins[1]);
 80001ac:	483b      	ldr	r0, [pc, #236]	; (800029c <Keypad_init+0x12c>)
 80001ae:	f000 fb0f 	bl	80007d0 <MCAL_GPIO_Init>

	Key_padRow_pins[2].GPIO_PinNumber = R2;
 80001b2:	4b38      	ldr	r3, [pc, #224]	; (8000294 <Keypad_init+0x124>)
 80001b4:	2204      	movs	r2, #4
 80001b6:	829a      	strh	r2, [r3, #20]
	Key_padRow_pins[2].GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001b8:	4b36      	ldr	r3, [pc, #216]	; (8000294 <Keypad_init+0x124>)
 80001ba:	2202      	movs	r2, #2
 80001bc:	759a      	strb	r2, [r3, #22]
	Key_padRow_pins[2].GPIO_Output_Speed = GPIO_SPEED_10M;
 80001be:	4b35      	ldr	r3, [pc, #212]	; (8000294 <Keypad_init+0x124>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	75da      	strb	r2, [r3, #23]
	Key_padRow_pins[2].PIN_GPIO=KEYPAD_R2_GPIO_PORT;
 80001c4:	4b33      	ldr	r3, [pc, #204]	; (8000294 <Keypad_init+0x124>)
 80001c6:	4a34      	ldr	r2, [pc, #208]	; (8000298 <Keypad_init+0x128>)
 80001c8:	611a      	str	r2, [r3, #16]
	MCAL_GPIO_Init(&Key_padRow_pins[2]);
 80001ca:	4835      	ldr	r0, [pc, #212]	; (80002a0 <Keypad_init+0x130>)
 80001cc:	f000 fb00 	bl	80007d0 <MCAL_GPIO_Init>

	Key_padRow_pins[3].GPIO_PinNumber = R3;
 80001d0:	4b30      	ldr	r3, [pc, #192]	; (8000294 <Keypad_init+0x124>)
 80001d2:	2208      	movs	r2, #8
 80001d4:	839a      	strh	r2, [r3, #28]
	Key_padRow_pins[3].GPIO_MODE = GPIO_MODE_INPUT_PU;
 80001d6:	4b2f      	ldr	r3, [pc, #188]	; (8000294 <Keypad_init+0x124>)
 80001d8:	2202      	movs	r2, #2
 80001da:	779a      	strb	r2, [r3, #30]
	Key_padRow_pins[3].GPIO_Output_Speed = GPIO_SPEED_10M;
 80001dc:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <Keypad_init+0x124>)
 80001de:	2201      	movs	r2, #1
 80001e0:	77da      	strb	r2, [r3, #31]
	Key_padRow_pins[3].PIN_GPIO=KEYPAD_R3_GPIO_PORT;
 80001e2:	4b2c      	ldr	r3, [pc, #176]	; (8000294 <Keypad_init+0x124>)
 80001e4:	4a2c      	ldr	r2, [pc, #176]	; (8000298 <Keypad_init+0x128>)
 80001e6:	619a      	str	r2, [r3, #24]
	MCAL_GPIO_Init(&Key_padRow_pins[3]);
 80001e8:	482e      	ldr	r0, [pc, #184]	; (80002a4 <Keypad_init+0x134>)
 80001ea:	f000 faf1 	bl	80007d0 <MCAL_GPIO_Init>
	//         column
	Key_padCol_pins[0].GPIO_PinNumber = C0;
 80001ee:	4b2e      	ldr	r3, [pc, #184]	; (80002a8 <Keypad_init+0x138>)
 80001f0:	2210      	movs	r2, #16
 80001f2:	809a      	strh	r2, [r3, #4]
	Key_padCol_pins[0].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f4:	4b2c      	ldr	r3, [pc, #176]	; (80002a8 <Keypad_init+0x138>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	719a      	strb	r2, [r3, #6]
	Key_padCol_pins[0].GPIO_Output_Speed = GPIO_SPEED_10M;
 80001fa:	4b2b      	ldr	r3, [pc, #172]	; (80002a8 <Keypad_init+0x138>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	71da      	strb	r2, [r3, #7]
	Key_padCol_pins[0].PIN_GPIO=KEYPAD_C0_GPIO_PORT;
 8000200:	4b29      	ldr	r3, [pc, #164]	; (80002a8 <Keypad_init+0x138>)
 8000202:	4a25      	ldr	r2, [pc, #148]	; (8000298 <Keypad_init+0x128>)
 8000204:	601a      	str	r2, [r3, #0]
	MCAL_GPIO_Init(&Key_padCol_pins[0]);
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <Keypad_init+0x138>)
 8000208:	f000 fae2 	bl	80007d0 <MCAL_GPIO_Init>

	Key_padCol_pins[1].GPIO_PinNumber = C1;
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <Keypad_init+0x138>)
 800020e:	2220      	movs	r2, #32
 8000210:	819a      	strh	r2, [r3, #12]
	Key_padCol_pins[1].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000212:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <Keypad_init+0x138>)
 8000214:	2204      	movs	r2, #4
 8000216:	739a      	strb	r2, [r3, #14]
	Key_padCol_pins[1].GPIO_Output_Speed = GPIO_SPEED_10M;
 8000218:	4b23      	ldr	r3, [pc, #140]	; (80002a8 <Keypad_init+0x138>)
 800021a:	2201      	movs	r2, #1
 800021c:	73da      	strb	r2, [r3, #15]
	Key_padCol_pins[1].PIN_GPIO=KEYPAD_C1_GPIO_PORT;
 800021e:	4b22      	ldr	r3, [pc, #136]	; (80002a8 <Keypad_init+0x138>)
 8000220:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <Keypad_init+0x128>)
 8000222:	609a      	str	r2, [r3, #8]
	MCAL_GPIO_Init(&Key_padCol_pins[1]);
 8000224:	4821      	ldr	r0, [pc, #132]	; (80002ac <Keypad_init+0x13c>)
 8000226:	f000 fad3 	bl	80007d0 <MCAL_GPIO_Init>

	Key_padCol_pins[2].GPIO_PinNumber = C2;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <Keypad_init+0x138>)
 800022c:	2240      	movs	r2, #64	; 0x40
 800022e:	829a      	strh	r2, [r3, #20]
	Key_padCol_pins[2].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <Keypad_init+0x138>)
 8000232:	2204      	movs	r2, #4
 8000234:	759a      	strb	r2, [r3, #22]
	Key_padCol_pins[2].GPIO_Output_Speed = GPIO_SPEED_10M;
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <Keypad_init+0x138>)
 8000238:	2201      	movs	r2, #1
 800023a:	75da      	strb	r2, [r3, #23]
	Key_padCol_pins[2].PIN_GPIO=KEYPAD_C2_GPIO_PORT;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <Keypad_init+0x138>)
 800023e:	4a16      	ldr	r2, [pc, #88]	; (8000298 <Keypad_init+0x128>)
 8000240:	611a      	str	r2, [r3, #16]
	MCAL_GPIO_Init(&Key_padCol_pins[2]);
 8000242:	481b      	ldr	r0, [pc, #108]	; (80002b0 <Keypad_init+0x140>)
 8000244:	f000 fac4 	bl	80007d0 <MCAL_GPIO_Init>

	Key_padCol_pins[3].GPIO_PinNumber = C3;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <Keypad_init+0x138>)
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	839a      	strh	r2, [r3, #28]
	Key_padCol_pins[3].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <Keypad_init+0x138>)
 8000250:	2204      	movs	r2, #4
 8000252:	779a      	strb	r2, [r3, #30]
	Key_padCol_pins[3].GPIO_Output_Speed = GPIO_SPEED_10M;
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <Keypad_init+0x138>)
 8000256:	2201      	movs	r2, #1
 8000258:	77da      	strb	r2, [r3, #31]
	Key_padCol_pins[3].PIN_GPIO=KEYPAD_C3_GPIO_PORT;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <Keypad_init+0x138>)
 800025c:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <Keypad_init+0x128>)
 800025e:	619a      	str	r2, [r3, #24]
	MCAL_GPIO_Init(&Key_padCol_pins[3]);
 8000260:	4814      	ldr	r0, [pc, #80]	; (80002b4 <Keypad_init+0x144>)
 8000262:	f000 fab5 	bl	80007d0 <MCAL_GPIO_Init>

	for (int i =0; i<=3;i++){
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	e00a      	b.n	8000282 <Keypad_init+0x112>
		MCAL_GPIO_WritePin(&Key_padCol_pins[i], HIGH);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	00db      	lsls	r3, r3, #3
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <Keypad_init+0x138>)
 8000272:	4413      	add	r3, r2
 8000274:	2101      	movs	r1, #1
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fb7f 	bl	800097a <MCAL_GPIO_WritePin>
	for (int i =0; i<=3;i++){
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b03      	cmp	r3, #3
 8000286:	ddf1      	ble.n	800026c <Keypad_init+0xfc>

	}

}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c
 8000298:	40010c00 	.word	0x40010c00
 800029c:	20000034 	.word	0x20000034
 80002a0:	2000003c 	.word	0x2000003c
 80002a4:	20000044 	.word	0x20000044
 80002a8:	2000004c 	.word	0x2000004c
 80002ac:	20000054 	.word	0x20000054
 80002b0:	2000005c 	.word	0x2000005c
 80002b4:	20000064 	.word	0x20000064

080002b8 <Keypad_getkey>:

char Keypad_getkey() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0

	for (int x=0;x<=3;x++){
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e060      	b.n	8000386 <Keypad_getkey+0xce>
		MCAL_GPIO_WritePin(&Key_padCol_pins[x], LOW);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	4a33      	ldr	r2, [pc, #204]	; (8000398 <Keypad_getkey+0xe0>)
 80002ca:	4413      	add	r3, r2
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fb53 	bl	800097a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(&Key_padCol_pins[(x+1)%4], HIGH);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	425a      	negs	r2, r3
 80002da:	f003 0303 	and.w	r3, r3, #3
 80002de:	f002 0203 	and.w	r2, r2, #3
 80002e2:	bf58      	it	pl
 80002e4:	4253      	negpl	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <Keypad_getkey+0xe0>)
 80002ea:	4413      	add	r3, r2
 80002ec:	2101      	movs	r1, #1
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fb43 	bl	800097a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(&Key_padCol_pins[(x+2)%4], HIGH);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3302      	adds	r3, #2
 80002f8:	425a      	negs	r2, r3
 80002fa:	f003 0303 	and.w	r3, r3, #3
 80002fe:	f002 0203 	and.w	r2, r2, #3
 8000302:	bf58      	it	pl
 8000304:	4253      	negpl	r3, r2
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <Keypad_getkey+0xe0>)
 800030a:	4413      	add	r3, r2
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fb33 	bl	800097a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(&Key_padCol_pins[(x+3)%4], HIGH);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3303      	adds	r3, #3
 8000318:	425a      	negs	r2, r3
 800031a:	f003 0303 	and.w	r3, r3, #3
 800031e:	f002 0203 	and.w	r2, r2, #3
 8000322:	bf58      	it	pl
 8000324:	4253      	negpl	r3, r2
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <Keypad_getkey+0xe0>)
 800032a:	4413      	add	r3, r2
 800032c:	2101      	movs	r1, #1
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fb23 	bl	800097a <MCAL_GPIO_WritePin>
		for (int y=0;y<=3;y++){
 8000334:	2300      	movs	r3, #0
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	e01f      	b.n	800037a <Keypad_getkey+0xc2>
			if (MCAL_GPIO_ReadPin(&Key_padRow_pins[y])==LOW){
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	4a17      	ldr	r2, [pc, #92]	; (800039c <Keypad_getkey+0xe4>)
 8000340:	4413      	add	r3, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f000 faf0 	bl	8000928 <MCAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d112      	bne.n	8000374 <Keypad_getkey+0xbc>
				while(MCAL_GPIO_ReadPin(&Key_padRow_pins[y])==LOW);
 800034e:	bf00      	nop
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <Keypad_getkey+0xe4>)
 8000356:	4413      	add	r3, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fae5 	bl	8000928 <MCAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f5      	beq.n	8000350 <Keypad_getkey+0x98>
				return my_keypad[y][x];
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <Keypad_getkey+0xe8>)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	441a      	add	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	e00c      	b.n	800038e <Keypad_getkey+0xd6>
		for (int y=0;y<=3;y++){
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2b03      	cmp	r3, #3
 800037e:	dddc      	ble.n	800033a <Keypad_getkey+0x82>
	for (int x=0;x<=3;x++){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2b03      	cmp	r3, #3
 800038a:	dd9b      	ble.n	80002c4 <Keypad_getkey+0xc>
			}

		}

	}
	return '\0';
 800038c:	2300      	movs	r3, #0

}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000004c 	.word	0x2000004c
 800039c:	2000002c 	.word	0x2000002c
 80003a0:	20000000 	.word	0x20000000

080003a4 <delay_ms>:
GPIO_PinConfig_t PinCfg ;
GPIO_PinConfig_t  RS_SWITCH_pin;
GPIO_PinConfig_t  RW_SWITCH_pin;
GPIO_PinConfig_t  EN_SWITCH_pin;

void delay_ms(uint32_t time) {
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	e00b      	b.n	80003ca <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	e002      	b.n	80003be <delay_ms+0x1a>
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	3301      	adds	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	2bfe      	cmp	r3, #254	; 0xfe
 80003c2:	d9f9      	bls.n	80003b8 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3301      	adds	r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d3ef      	bcc.n	80003b2 <delay_ms+0xe>
			;
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
	...

080003e0 <LCD_GPIO_init>:

void LCD_GPIO_init(){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

	RS_SWITCH_pin.GPIO_PinNumber = RS_SWITCH;
 80003e4:	4b50      	ldr	r3, [pc, #320]	; (8000528 <LCD_GPIO_init+0x148>)
 80003e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ea:	809a      	strh	r2, [r3, #4]
	RS_SWITCH_pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003ec:	4b4e      	ldr	r3, [pc, #312]	; (8000528 <LCD_GPIO_init+0x148>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	719a      	strb	r2, [r3, #6]
	RS_SWITCH_pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003f2:	4b4d      	ldr	r3, [pc, #308]	; (8000528 <LCD_GPIO_init+0x148>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	71da      	strb	r2, [r3, #7]
	RS_SWITCH_pin.PIN_GPIO=RS_SWITCH_GPIO;
 80003f8:	4b4b      	ldr	r3, [pc, #300]	; (8000528 <LCD_GPIO_init+0x148>)
 80003fa:	4a4c      	ldr	r2, [pc, #304]	; (800052c <LCD_GPIO_init+0x14c>)
 80003fc:	601a      	str	r2, [r3, #0]
	MCAL_GPIO_Init(&RS_SWITCH_pin);
 80003fe:	484a      	ldr	r0, [pc, #296]	; (8000528 <LCD_GPIO_init+0x148>)
 8000400:	f000 f9e6 	bl	80007d0 <MCAL_GPIO_Init>

	RW_SWITCH_pin.GPIO_PinNumber = RW_SWITCH;
 8000404:	4b4a      	ldr	r3, [pc, #296]	; (8000530 <LCD_GPIO_init+0x150>)
 8000406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800040a:	809a      	strh	r2, [r3, #4]
	RW_SWITCH_pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800040c:	4b48      	ldr	r3, [pc, #288]	; (8000530 <LCD_GPIO_init+0x150>)
 800040e:	2204      	movs	r2, #4
 8000410:	719a      	strb	r2, [r3, #6]
	RW_SWITCH_pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000412:	4b47      	ldr	r3, [pc, #284]	; (8000530 <LCD_GPIO_init+0x150>)
 8000414:	2201      	movs	r2, #1
 8000416:	71da      	strb	r2, [r3, #7]
	RW_SWITCH_pin.PIN_GPIO=RW_SWITCH_GPIO;
 8000418:	4b45      	ldr	r3, [pc, #276]	; (8000530 <LCD_GPIO_init+0x150>)
 800041a:	4a44      	ldr	r2, [pc, #272]	; (800052c <LCD_GPIO_init+0x14c>)
 800041c:	601a      	str	r2, [r3, #0]
	MCAL_GPIO_Init(&RW_SWITCH_pin);
 800041e:	4844      	ldr	r0, [pc, #272]	; (8000530 <LCD_GPIO_init+0x150>)
 8000420:	f000 f9d6 	bl	80007d0 <MCAL_GPIO_Init>

	EN_SWITCH_pin.GPIO_PinNumber = EN_SWITCH;
 8000424:	4b43      	ldr	r3, [pc, #268]	; (8000534 <LCD_GPIO_init+0x154>)
 8000426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800042a:	809a      	strh	r2, [r3, #4]
	EN_SWITCH_pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042c:	4b41      	ldr	r3, [pc, #260]	; (8000534 <LCD_GPIO_init+0x154>)
 800042e:	2204      	movs	r2, #4
 8000430:	719a      	strb	r2, [r3, #6]
	EN_SWITCH_pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000432:	4b40      	ldr	r3, [pc, #256]	; (8000534 <LCD_GPIO_init+0x154>)
 8000434:	2201      	movs	r2, #1
 8000436:	71da      	strb	r2, [r3, #7]
	EN_SWITCH_pin.PIN_GPIO=EN_SWITCH_GPIO;
 8000438:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <LCD_GPIO_init+0x154>)
 800043a:	4a3c      	ldr	r2, [pc, #240]	; (800052c <LCD_GPIO_init+0x14c>)
 800043c:	601a      	str	r2, [r3, #0]
	MCAL_GPIO_Init(&EN_SWITCH_pin);
 800043e:	483d      	ldr	r0, [pc, #244]	; (8000534 <LCD_GPIO_init+0x154>)
 8000440:	f000 f9c6 	bl	80007d0 <MCAL_GPIO_Init>


	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.PIN_GPIO=DATA_GPIO;
 8000444:	4b3c      	ldr	r3, [pc, #240]	; (8000538 <LCD_GPIO_init+0x158>)
 8000446:	4a39      	ldr	r2, [pc, #228]	; (800052c <LCD_GPIO_init+0x14c>)
 8000448:	601a      	str	r2, [r3, #0]

	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800044a:	4b3b      	ldr	r3, [pc, #236]	; (8000538 <LCD_GPIO_init+0x158>)
 800044c:	2201      	movs	r2, #1
 800044e:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000450:	4b39      	ldr	r3, [pc, #228]	; (8000538 <LCD_GPIO_init+0x158>)
 8000452:	2204      	movs	r2, #4
 8000454:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000456:	4b38      	ldr	r3, [pc, #224]	; (8000538 <LCD_GPIO_init+0x158>)
 8000458:	2201      	movs	r2, #1
 800045a:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 800045c:	4836      	ldr	r0, [pc, #216]	; (8000538 <LCD_GPIO_init+0x158>)
 800045e:	f000 f9b7 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000462:	4b35      	ldr	r3, [pc, #212]	; (8000538 <LCD_GPIO_init+0x158>)
 8000464:	2202      	movs	r2, #2
 8000466:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000468:	4b33      	ldr	r3, [pc, #204]	; (8000538 <LCD_GPIO_init+0x158>)
 800046a:	2204      	movs	r2, #4
 800046c:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800046e:	4b32      	ldr	r3, [pc, #200]	; (8000538 <LCD_GPIO_init+0x158>)
 8000470:	2201      	movs	r2, #1
 8000472:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 8000474:	4830      	ldr	r0, [pc, #192]	; (8000538 <LCD_GPIO_init+0x158>)
 8000476:	f000 f9ab 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800047a:	4b2f      	ldr	r3, [pc, #188]	; (8000538 <LCD_GPIO_init+0x158>)
 800047c:	2204      	movs	r2, #4
 800047e:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000480:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <LCD_GPIO_init+0x158>)
 8000482:	2204      	movs	r2, #4
 8000484:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000486:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <LCD_GPIO_init+0x158>)
 8000488:	2201      	movs	r2, #1
 800048a:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 800048c:	482a      	ldr	r0, [pc, #168]	; (8000538 <LCD_GPIO_init+0x158>)
 800048e:	f000 f99f 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000492:	4b29      	ldr	r3, [pc, #164]	; (8000538 <LCD_GPIO_init+0x158>)
 8000494:	2208      	movs	r2, #8
 8000496:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000498:	4b27      	ldr	r3, [pc, #156]	; (8000538 <LCD_GPIO_init+0x158>)
 800049a:	2204      	movs	r2, #4
 800049c:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800049e:	4b26      	ldr	r3, [pc, #152]	; (8000538 <LCD_GPIO_init+0x158>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 80004a4:	4824      	ldr	r0, [pc, #144]	; (8000538 <LCD_GPIO_init+0x158>)
 80004a6:	f000 f993 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80004aa:	4b23      	ldr	r3, [pc, #140]	; (8000538 <LCD_GPIO_init+0x158>)
 80004ac:	2210      	movs	r2, #16
 80004ae:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004b0:	4b21      	ldr	r3, [pc, #132]	; (8000538 <LCD_GPIO_init+0x158>)
 80004b2:	2204      	movs	r2, #4
 80004b4:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <LCD_GPIO_init+0x158>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 80004bc:	481e      	ldr	r0, [pc, #120]	; (8000538 <LCD_GPIO_init+0x158>)
 80004be:	f000 f987 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <LCD_GPIO_init+0x158>)
 80004c4:	2220      	movs	r2, #32
 80004c6:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <LCD_GPIO_init+0x158>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <LCD_GPIO_init+0x158>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 80004d4:	4818      	ldr	r0, [pc, #96]	; (8000538 <LCD_GPIO_init+0x158>)
 80004d6:	f000 f97b 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <LCD_GPIO_init+0x158>)
 80004dc:	2240      	movs	r2, #64	; 0x40
 80004de:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <LCD_GPIO_init+0x158>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <LCD_GPIO_init+0x158>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <LCD_GPIO_init+0x158>)
 80004ee:	f000 f96f 	bl	80007d0 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <LCD_GPIO_init+0x158>)
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	809a      	strh	r2, [r3, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <LCD_GPIO_init+0x158>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	719a      	strb	r2, [r3, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <LCD_GPIO_init+0x158>)
 8000500:	2201      	movs	r2, #1
 8000502:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&PinCfg);
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LCD_GPIO_init+0x158>)
 8000506:	f000 f963 	bl	80007d0 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(&EN_SWITCH_pin, LOW);
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <LCD_GPIO_init+0x154>)
 800050e:	f000 fa34 	bl	800097a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&RS_SWITCH_pin, LOW);
 8000512:	2100      	movs	r1, #0
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <LCD_GPIO_init+0x148>)
 8000516:	f000 fa30 	bl	800097a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&RW_SWITCH_pin, LOW);
 800051a:	2100      	movs	r1, #0
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <LCD_GPIO_init+0x150>)
 800051e:	f000 fa2c 	bl	800097a <MCAL_GPIO_WritePin>

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000074 	.word	0x20000074
 800052c:	40010800 	.word	0x40010800
 8000530:	2000007c 	.word	0x2000007c
 8000534:	20000084 	.word	0x20000084
 8000538:	2000006c 	.word	0x2000006c

0800053c <LCD_clear_screen>:

void LCD_clear_screen() {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 f849 	bl	80005d8 <LCD_WRITE_COMMAND>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <LCD_lcd_kick>:

void LCD_lcd_kick() {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(&EN_SWITCH_pin, HIGH);
 8000550:	2101      	movs	r1, #1
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <LCD_lcd_kick+0x20>)
 8000554:	f000 fa11 	bl	800097a <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000558:	2032      	movs	r0, #50	; 0x32
 800055a:	f7ff ff23 	bl	80003a4 <delay_ms>
	MCAL_GPIO_WritePin(&EN_SWITCH_pin, LOW);
 800055e:	2100      	movs	r1, #0
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <LCD_lcd_kick+0x20>)
 8000562:	f000 fa0a 	bl	800097a <MCAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000084 	.word	0x20000084

08000570 <LCD_INIT>:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
	}
}

void LCD_INIT() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	RS_SWITCH_GPIO_CLK_EN();
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <LCD_INIT+0x64>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <LCD_INIT+0x64>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]

	RW_SWITCH_GPIO_CLK_EN();
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <LCD_INIT+0x64>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <LCD_INIT+0x64>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]

	EN_SWITCH_GPIO_CLK_EN();
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <LCD_INIT+0x64>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <LCD_INIT+0x64>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]

	DATA_GPIO_CLK_EN();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <LCD_INIT+0x64>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LCD_INIT+0x64>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]

	delay_ms(20);
 80005a4:	2014      	movs	r0, #20
 80005a6:	f7ff fefd 	bl	80003a4 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80005aa:	f7ff ff19 	bl	80003e0 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80005ae:	200f      	movs	r0, #15
 80005b0:	f7ff fef8 	bl	80003a4 <delay_ms>

	LCD_clear_screen();
 80005b4:	f7ff ffc2 	bl	800053c <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80005b8:	2038      	movs	r0, #56	; 0x38
 80005ba:	f000 f80d 	bl	80005d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80005be:	2006      	movs	r0, #6
 80005c0:	f000 f80a 	bl	80005d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80005c4:	2080      	movs	r0, #128	; 0x80
 80005c6:	f000 f807 	bl	80005d8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80005ca:	200f      	movs	r0, #15
 80005cc:	f000 f804 	bl	80005d8 <LCD_WRITE_COMMAND>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000

080005d8 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(&RW_SWITCH_pin, LOW);


}

void LCD_WRITE_COMMAND(unsigned char command) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(DATA_GPIO, command);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <LCD_WRITE_COMMAND+0x38>)
 80005ea:	f000 f9b8 	bl	800095e <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(&RW_SWITCH_pin, LOW);
 80005ee:	2100      	movs	r1, #0
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <LCD_WRITE_COMMAND+0x3c>)
 80005f2:	f000 f9c2 	bl	800097a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&RS_SWITCH_pin, LOW);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <LCD_WRITE_COMMAND+0x40>)
 80005fa:	f000 f9be 	bl	800097a <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff fed0 	bl	80003a4 <delay_ms>
	LCD_lcd_kick();
 8000604:	f7ff ffa2 	bl	800054c <LCD_lcd_kick>

}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40010800 	.word	0x40010800
 8000614:	2000007c 	.word	0x2000007c
 8000618:	20000074 	.word	0x20000074

0800061c <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(DATA_GPIO, character);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	b29b      	uxth	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <LCD_WRITE_CHAR+0x38>)
 800062e:	f000 f996 	bl	800095e <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(&RW_SWITCH_pin, LOW);
 8000632:	2100      	movs	r1, #0
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <LCD_WRITE_CHAR+0x3c>)
 8000636:	f000 f9a0 	bl	800097a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&RS_SWITCH_pin, HIGH);
 800063a:	2101      	movs	r1, #1
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <LCD_WRITE_CHAR+0x40>)
 800063e:	f000 f99c 	bl	800097a <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff feae 	bl	80003a4 <delay_ms>
	LCD_lcd_kick();
 8000648:	f7ff ff80 	bl	800054c <LCD_lcd_kick>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40010800 	.word	0x40010800
 8000658:	2000007c 	.word	0x2000007c
 800065c:	20000074 	.word	0x20000074

08000660 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000670:	f000 80a5 	beq.w	80007be <Get_CRLH_Position+0x15e>
 8000674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000678:	f300 80a3 	bgt.w	80007c2 <Get_CRLH_Position+0x162>
 800067c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000680:	f000 809b 	beq.w	80007ba <Get_CRLH_Position+0x15a>
 8000684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000688:	f300 809b 	bgt.w	80007c2 <Get_CRLH_Position+0x162>
 800068c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000690:	f000 8091 	beq.w	80007b6 <Get_CRLH_Position+0x156>
 8000694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000698:	f300 8093 	bgt.w	80007c2 <Get_CRLH_Position+0x162>
 800069c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006a0:	f000 8087 	beq.w	80007b2 <Get_CRLH_Position+0x152>
 80006a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006a8:	f300 808b 	bgt.w	80007c2 <Get_CRLH_Position+0x162>
 80006ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006b0:	d07d      	beq.n	80007ae <Get_CRLH_Position+0x14e>
 80006b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006b6:	f300 8084 	bgt.w	80007c2 <Get_CRLH_Position+0x162>
 80006ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006be:	d074      	beq.n	80007aa <Get_CRLH_Position+0x14a>
 80006c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006c4:	dc7d      	bgt.n	80007c2 <Get_CRLH_Position+0x162>
 80006c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ca:	d06c      	beq.n	80007a6 <Get_CRLH_Position+0x146>
 80006cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006d0:	dc77      	bgt.n	80007c2 <Get_CRLH_Position+0x162>
 80006d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006d6:	d064      	beq.n	80007a2 <Get_CRLH_Position+0x142>
 80006d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006dc:	dc71      	bgt.n	80007c2 <Get_CRLH_Position+0x162>
 80006de:	2b80      	cmp	r3, #128	; 0x80
 80006e0:	d05d      	beq.n	800079e <Get_CRLH_Position+0x13e>
 80006e2:	2b80      	cmp	r3, #128	; 0x80
 80006e4:	dc6d      	bgt.n	80007c2 <Get_CRLH_Position+0x162>
 80006e6:	2b20      	cmp	r3, #32
 80006e8:	dc48      	bgt.n	800077c <Get_CRLH_Position+0x11c>
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dd69      	ble.n	80007c2 <Get_CRLH_Position+0x162>
 80006ee:	3b01      	subs	r3, #1
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	d866      	bhi.n	80007c2 <Get_CRLH_Position+0x162>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <Get_CRLH_Position+0x9c>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000783 	.word	0x08000783
 8000700:	08000787 	.word	0x08000787
 8000704:	080007c3 	.word	0x080007c3
 8000708:	0800078b 	.word	0x0800078b
 800070c:	080007c3 	.word	0x080007c3
 8000710:	080007c3 	.word	0x080007c3
 8000714:	080007c3 	.word	0x080007c3
 8000718:	0800078f 	.word	0x0800078f
 800071c:	080007c3 	.word	0x080007c3
 8000720:	080007c3 	.word	0x080007c3
 8000724:	080007c3 	.word	0x080007c3
 8000728:	080007c3 	.word	0x080007c3
 800072c:	080007c3 	.word	0x080007c3
 8000730:	080007c3 	.word	0x080007c3
 8000734:	080007c3 	.word	0x080007c3
 8000738:	08000793 	.word	0x08000793
 800073c:	080007c3 	.word	0x080007c3
 8000740:	080007c3 	.word	0x080007c3
 8000744:	080007c3 	.word	0x080007c3
 8000748:	080007c3 	.word	0x080007c3
 800074c:	080007c3 	.word	0x080007c3
 8000750:	080007c3 	.word	0x080007c3
 8000754:	080007c3 	.word	0x080007c3
 8000758:	080007c3 	.word	0x080007c3
 800075c:	080007c3 	.word	0x080007c3
 8000760:	080007c3 	.word	0x080007c3
 8000764:	080007c3 	.word	0x080007c3
 8000768:	080007c3 	.word	0x080007c3
 800076c:	080007c3 	.word	0x080007c3
 8000770:	080007c3 	.word	0x080007c3
 8000774:	080007c3 	.word	0x080007c3
 8000778:	08000797 	.word	0x08000797
 800077c:	2b40      	cmp	r3, #64	; 0x40
 800077e:	d00c      	beq.n	800079a <Get_CRLH_Position+0x13a>
 8000780:	e01f      	b.n	80007c2 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000782:	2300      	movs	r3, #0
 8000784:	e01e      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000786:	2304      	movs	r3, #4
 8000788:	e01c      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 800078a:	2308      	movs	r3, #8
 800078c:	e01a      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 800078e:	230c      	movs	r3, #12
 8000790:	e018      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000792:	2310      	movs	r3, #16
 8000794:	e016      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 8000796:	2314      	movs	r3, #20
 8000798:	e014      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 800079a:	2318      	movs	r3, #24
 800079c:	e012      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 800079e:	231c      	movs	r3, #28
 80007a0:	e010      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e00e      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80007a6:	2304      	movs	r3, #4
 80007a8:	e00c      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80007aa:	2308      	movs	r3, #8
 80007ac:	e00a      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80007ae:	230c      	movs	r3, #12
 80007b0:	e008      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80007b2:	2310      	movs	r3, #16
 80007b4:	e006      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80007b6:	2314      	movs	r3, #20
 80007b8:	e004      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80007ba:	2318      	movs	r3, #24
 80007bc:	e002      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80007be:	231c      	movs	r3, #28
 80007c0:	e000      	b.n	80007c4 <Get_CRLH_Position+0x164>
		break ;


	}
return 0 ;
 80007c2:	2300      	movs	r3, #0

}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_PinConfig_t* PinConfig)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	volatile uint32_t* configregister = NULL ;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
	uint8_t	PIN_Config = 0 ;
 80007dc:	2300      	movs	r3, #0
 80007de:	74fb      	strb	r3, [r7, #19]
	GPIO_TypeDef *GPIOx= PinConfig->PIN_GPIO;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d801      	bhi.n	80007f2 <MCAL_GPIO_Init+0x22>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	e001      	b.n	80007f6 <MCAL_GPIO_Init+0x26>
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3304      	adds	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	889b      	ldrh	r3, [r3, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff2f 	bl	8000660 <Get_CRLH_Position>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	230f      	movs	r3, #15
 8000808:	4093      	lsls	r3, r2
 800080a:	43da      	mvns	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	401a      	ands	r2, r3
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	799b      	ldrb	r3, [r3, #6]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d00b      	beq.n	8000836 <MCAL_GPIO_Init+0x66>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	799b      	ldrb	r3, [r3, #6]
 8000822:	2b05      	cmp	r3, #5
 8000824:	d007      	beq.n	8000836 <MCAL_GPIO_Init+0x66>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	799b      	ldrb	r3, [r3, #6]
 800082a:	2b07      	cmp	r3, #7
 800082c:	d003      	beq.n	8000836 <MCAL_GPIO_Init+0x66>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	799b      	ldrb	r3, [r3, #6]
 8000832:	2b06      	cmp	r3, #6
 8000834:	d11c      	bne.n	8000870 <MCAL_GPIO_Init+0xa0>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	799b      	ldrb	r3, [r3, #6]
 800083a:	3b04      	subs	r3, #4
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	b25a      	sxtb	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	79db      	ldrb	r3, [r3, #7]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b25b      	sxtb	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 030f 	and.w	r3, r3, #15
 8000850:	74fb      	strb	r3, [r7, #19]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000852:	7cfc      	ldrb	r4, [r7, #19]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	889b      	ldrh	r3, [r3, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff01 	bl	8000660 <Get_CRLH_Position>
 800085e:	4603      	mov	r3, r0
 8000860:	fa04 f203 	lsl.w	r2, r4, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	431a      	orrs	r2, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e057      	b.n	8000920 <MCAL_GPIO_Init+0x150>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	799b      	ldrb	r3, [r3, #6]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d003      	beq.n	8000880 <MCAL_GPIO_Init+0xb0>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	799b      	ldrb	r3, [r3, #6]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d115      	bne.n	80008ac <MCAL_GPIO_Init+0xdc>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	799b      	ldrb	r3, [r3, #6]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f003 030f 	and.w	r3, r3, #15
 800088c:	74fb      	strb	r3, [r7, #19]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800088e:	7cfc      	ldrb	r4, [r7, #19]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fee3 	bl	8000660 <Get_CRLH_Position>
 800089a:	4603      	mov	r3, r0
 800089c:	fa04 f203 	lsl.w	r2, r4, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	431a      	orrs	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e039      	b.n	8000920 <MCAL_GPIO_Init+0x150>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	799b      	ldrb	r3, [r3, #6]
 80008b0:	2b08      	cmp	r3, #8
 80008b2:	d110      	bne.n	80008d6 <MCAL_GPIO_Init+0x106>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 80008b4:	2304      	movs	r3, #4
 80008b6:	74fb      	strb	r3, [r7, #19]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80008b8:	7cfc      	ldrb	r4, [r7, #19]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	889b      	ldrh	r3, [r3, #4]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fece 	bl	8000660 <Get_CRLH_Position>
 80008c4:	4603      	mov	r3, r0
 80008c6:	fa04 f203 	lsl.w	r2, r4, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 80008d4:	e024      	b.n	8000920 <MCAL_GPIO_Init+0x150>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 80008d6:	2308      	movs	r3, #8
 80008d8:	74fb      	strb	r3, [r7, #19]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80008da:	7cfc      	ldrb	r4, [r7, #19]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff febd 	bl	8000660 <Get_CRLH_Position>
 80008e6:	4603      	mov	r3, r0
 80008e8:	fa04 f203 	lsl.w	r2, r4, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	431a      	orrs	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	799b      	ldrb	r3, [r3, #6]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d107      	bne.n	800090e <MCAL_GPIO_Init+0x13e>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	8892      	ldrh	r2, [r2, #4]
 8000906:	431a      	orrs	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	60da      	str	r2, [r3, #12]
}
 800090c:	e008      	b.n	8000920 <MCAL_GPIO_Init+0x150>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	8892      	ldrh	r2, [r2, #4]
 8000916:	43d2      	mvns	r2, r2
 8000918:	401a      	ands	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	60da      	str	r2, [r3, #12]
}
 800091e:	e7ff      	b.n	8000920 <MCAL_GPIO_Init+0x150>
 8000920:	bf00      	nop
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}

08000928 <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: specifies the port bit to read. Set by @ref GPIO_PINS_define
 * @retval 				-The input port pin value.
 * Note					-none
 */
uint8_t  MCAL_GPIO_ReadPin		(GPIO_PinConfig_t* PinConfig)
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	uint8_t bitstatus ;
	GPIO_TypeDef *GPIOx= PinConfig->PIN_GPIO;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	613b      	str	r3, [r7, #16]
	uint16_t PinNumber=PinConfig->GPIO_PinNumber;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	889b      	ldrh	r3, [r3, #4]
 800093a:	81fb      	strh	r3, [r7, #14]
	if ((GPIOx->IDR & PinNumber) != (uint32_t)LOW)
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	4013      	ands	r3, r2
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <MCAL_GPIO_ReadPin+0x26>
	{
		bitstatus = HIGH;
 8000948:	2301      	movs	r3, #1
 800094a:	75fb      	strb	r3, [r7, #23]
 800094c:	e001      	b.n	8000952 <MCAL_GPIO_ReadPin+0x2a>
	}else
	{
		bitstatus = LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	75fb      	strb	r3, [r7, #23]
	}
	return bitstatus;
 8000952:	7dfb      	ldrb	r3, [r7, #23]
}
 8000954:	4618      	mov	r0, r3
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32_t)(Value);
 800096a:	887a      	ldrh	r2, [r7, #2]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60da      	str	r2, [r3, #12]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <MCAL_GPIO_WritePin>:
 *
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin	(GPIO_PinConfig_t* PinConfig, uint8_t Value)
{   GPIO_TypeDef *GPIOx= PinConfig->PIN_GPIO;
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	70fb      	strb	r3, [r7, #3]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	60fb      	str	r3, [r7, #12]
    uint16_t PinNumber=PinConfig->GPIO_PinNumber;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	889b      	ldrh	r3, [r3, #4]
 8000990:	817b      	strh	r3, [r7, #10]
	if (Value != LOW)
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <MCAL_GPIO_WritePin+0x26>
	{
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 8000998:	897a      	ldrh	r2, [r7, #10]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	611a      	str	r2, [r3, #16]

//		or
//		GPIOx->ODR &= ~(PinNumber) ;
	}

}
 800099e:	e002      	b.n	80009a6 <MCAL_GPIO_WritePin+0x2c>
		GPIOx->BRR = (uint32_t)PinNumber ;
 80009a0:	897a      	ldrh	r2, [r7, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	615a      	str	r2, [r3, #20]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <main>:
return;
}


int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	LCD_INIT();
 80009b6:	f7ff fddb 	bl	8000570 <LCD_INIT>
	 /* Loop forever */
	RCC_GPIOB_CLK_EN();
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <main+0x40>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <main+0x40>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6193      	str	r3, [r2, #24]
	Keypad_init();
 80009c6:	f7ff fbd3 	bl	8000170 <Keypad_init>

	//LCD_WRITE_STRING("hello ");
	while(1){
      char x=Keypad_getkey();
 80009ca:	f7ff fc75 	bl	80002b8 <Keypad_getkey>
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
      if(x!='\0'){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0f8      	beq.n	80009ca <main+0x1a>
    	  if(x=='='){
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b3d      	cmp	r3, #61	; 0x3d
 80009dc:	d102      	bne.n	80009e4 <main+0x34>
    		  LCD_clear_screen();
 80009de:	f7ff fdad 	bl	800053c <LCD_clear_screen>
 80009e2:	e7f2      	b.n	80009ca <main+0x1a>
    	  }
    	  else{
    	  LCD_WRITE_CHAR(x);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe18 	bl	800061c <LCD_WRITE_CHAR>
	while(1){
 80009ec:	e7ed      	b.n	80009ca <main+0x1a>
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a22:	f000 f811 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff ffc3 	bl	80009b0 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a38:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000a3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a40:	2000008c 	.word	0x2000008c

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	4d0c      	ldr	r5, [pc, #48]	; (8000a80 <__libc_init_array+0x38>)
 8000a4e:	4c0d      	ldr	r4, [pc, #52]	; (8000a84 <__libc_init_array+0x3c>)
 8000a50:	1b64      	subs	r4, r4, r5
 8000a52:	10a4      	asrs	r4, r4, #2
 8000a54:	42a6      	cmp	r6, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	f000 f81a 	bl	8000a90 <_init>
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	4d0a      	ldr	r5, [pc, #40]	; (8000a88 <__libc_init_array+0x40>)
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <__libc_init_array+0x44>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a70:	4798      	blx	r3
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7a:	4798      	blx	r3
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	08000aa8 	.word	0x08000aa8
 8000a84:	08000aa8 	.word	0x08000aa8
 8000a88:	08000aa8 	.word	0x08000aa8
 8000a8c:	08000aac 	.word	0x08000aac

08000a90 <_init>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr

08000a9c <_fini>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr
