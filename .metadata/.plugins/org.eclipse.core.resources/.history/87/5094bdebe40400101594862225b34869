#include "keypad.h"

GPIO_PinConfig_t Key_padRow_pins[4] ; //rows of the keypad
GPIO_PinConfig_t Key_padCol_pins[4]; //columns

void delay_mss(uint32_t time) {
	uint32_t i, j;
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {



	Key_padRow_pins[0].GPIO_PinNumber = R0;
	Key_padRow_pins[0].GPIO_MODE = GPIO_MODE_INPUT_PU;
	Key_padRow_pins[0].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padRow_pins[0].PIN_GPIO=KEYPAD_R0_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padRow_pins[0]);

	Key_padRow_pins[1].GPIO_PinNumber = R1;
	Key_padRow_pins[1].GPIO_MODE = GPIO_MODE_INPUT_PU;
	Key_padRow_pins[1].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padRow_pins[1].PIN_GPIO=KEYPAD_R1_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padRow_pins[1]);

	Key_padRow_pins[2].GPIO_PinNumber = R2;
	Key_padRow_pins[2].GPIO_MODE = GPIO_MODE_INPUT_PU;
	Key_padRow_pins[2].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padRow_pins[2].PIN_GPIO=KEYPAD_R2_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padRow_pins[2]);

	Key_padRow_pins[3].GPIO_PinNumber = R3;
	Key_padRow_pins[3].GPIO_MODE = GPIO_MODE_INPUT_PU;
	Key_padRow_pins[3].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padRow_pins[3].PIN_GPIO=KEYPAD_R3_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padRow_pins[3]);
	//         column
	Key_padCol_pins[0].GPIO_PinNumber = C0;
	Key_padCol_pins[0].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	Key_padCol_pins[0].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padCol_pins[0].PIN_GPIO=KEYPAD_C0_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padCol_pins[0]);

	Key_padCol_pins[1].GPIO_PinNumber = C1;
	Key_padCol_pins[1].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	Key_padCol_pins[1].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padCol_pins[1].PIN_GPIO=KEYPAD_C1_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padCol_pins[1]);

	Key_padCol_pins[2].GPIO_PinNumber = C2;
	Key_padCol_pins[2].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	Key_padCol_pins[2].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padCol_pins[2].PIN_GPIO=KEYPAD_C2_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padCol_pins[2]);

	Key_padCol_pins[3].GPIO_PinNumber = C3;
	Key_padCol_pins[3].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	Key_padCol_pins[3].GPIO_Output_Speed = GPIO_SPEED_10M;
	Key_padCol_pins[3].PIN_GPIO=KEYPAD_C3_GPIO_PORT;
	MCAL_GPIO_Init(&Key_padCol_pins[3]);

	for (int i =0; i<=3;i++){
		MCAL_GPIO_WritePin(&Key_padCol_pins_pins[i], HIGH);
		MCAL_GPIO_WritePin(&Key_padRow_pins[i], HIGH);

	}

}

char Keypad_getkey() {
	int i, j;
	for (i = 0; i < 4; i++) {
//		KEYPAD_PORT |= ((1 << Key_padCol[0]) | (1 << Key_padCol[1])
//				| (1 << Key_padCol[2]) | (1 << Key_padCol[3]));
//		KEYPAD_PORT &= ~(1 << Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
		for (j = 0; j < 4; j++) {
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0) {
				while (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
					;
				switch (i) {
				case (0):
					if (j == 0)
						return '7';
					else if (j == 1)
						return '4';
					else if (j == 2)
						return '1';
					else if (j == 3)
						return '?';
					break;
				case (1):
					if (j == 0)
						return '8';
					else if (j == 1)
						return '5';
					else if (j == 2)
						return '2';
					else if (j == 3)
						return '0';
					break;
				case (2):
					if (j == 0)
						return '9';
					else if (j == 1)
						return '6';
					else if (j == 2)
						return '3';
					else if (j == 3)
						return '=';
					break;
				case (3):
					if (j == 0)
						return '/';
					else if (j == 1)
						return '*';
					else if (j == 2)
						return '-';
					else if (j == 3)
						return '+';
					break;
				}
			}
		}
	}
	return 'A';
}
